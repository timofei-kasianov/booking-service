version: '3.2'
services:

  config-server:
    image: timofeikasianov/test:booking-config-server
    ports:
      - "8888:8888"
    networks:
      - booking-system-web
    volumes:
      - type: volume
        source: logs
        target: /app/logs

  service-registry:
    image: timofeikasianov/test:booking-service-registry
    ports:
      - "8088:8080"
    depends_on:
      - config-server
    networks:
      - booking-system-web
    volumes:
      - type: volume
        source: logs
        target: /app/logs
    entrypoint: /bin/sh
    command: >
      -c "
      while ! (wget config-server:8888/service-registry/docker); do sleep 5; echo 'Waiting for config-server to start-up...'; done;
      java -Dspring.profiles.active=docker -jar /app/service-registry.jar
      "

  api-gateway:
    image: timofeikasianov/test:booking-api-gateway
    ports:
      - "8080:8080"
    networks:
      - booking-system-web
    volumes:
      - type: volume
        source: logs
        target: /app/logs
    depends_on:
      - config-server
      - service-registry
    entrypoint: /bin/sh
    command: >
      -c "
      while ! (wget config-server:8888/api-gateway/docker); do sleep 5; echo 'Waiting for config-server to start-up...'; done;
      java -Dspring.profiles.active=docker -jar /app/api-gateway.jar
      "

  geo-location-service:
    image: timofeikasianov/test:booking-geo-location-service
    ports:
      - "8081:8080"
    networks:
      - booking-system-web
    volumes:
      - type: volume
        source: logs
        target: /app/logs
    depends_on:
      - config-server
      - service-registry
    entrypoint: /bin/sh
    command: >
      -c "
      while ! (wget config-server:8888/geo-location-service/docker); do sleep 5; echo 'Waiting for config-server to start-up...'; done;
      java -Dspring.profiles.active=docker -jar /app/geo-location-service.jar
      "

  reservation-service:
    image: timofeikasianov/test:booking-reservation-service
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
    ports:
      - "8082:8080"
    networks:
      - booking-system-web
    volumes:
      - type: volume
        source: logs
        target: /app/logs
    depends_on:
      - config-server
      - service-registry
    entrypoint: /bin/sh
    command: >
      -c "
      while ! (wget config-server:8888/reservation-service/docker); do sleep 5; echo 'Waiting for config-server to start-up...'; done;
      java -Dspring.profiles.active=docker -jar /app/reservation-service.jar
      "

  accommodation-service:
    image: timofeikasianov/test:booking-accommodation-service
    deploy:
          replicas: 3
          restart_policy:
            condition: on-failure
    ports:
      - "8083:8080"
    networks:
      - booking-system-web
    volumes:
      - type: volume
        source: logs
        target: /app/logs
    depends_on:
      - config-server
      - service-registry
      - reservation-service
    entrypoint: /bin/sh
    command: >
      -c "
      while ! (wget config-server:8888/accommodation-service/docker); do sleep 5; echo 'Waiting for config-server to start-up...'; done;
      java -Dspring.profiles.active=docker -jar /app/accommodation-service.jar
      "

  services-dashboard:
    image: timofeikasianov/test:booking-services-dashboard
    ports:
      - "8084:8080"
    networks:
      - booking-system-web
    volumes:
      - type: volume
        source: logs
        target: /app/logs
    depends_on:
      - config-server
      - service-registry
    entrypoint: /bin/sh
    command: >
      -c "
      while ! (wget config-server:8888/services-dashboard/docker); do sleep 5; echo 'Waiting for config-server to start-up...'; done;
      java -Dspring.profiles.active=docker -jar /app/services-dashboard.jar
      "

  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8085:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - booking-system-web

networks:
  booking-system-web:

volumes:
  logs:
